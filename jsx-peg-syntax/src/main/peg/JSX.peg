programFile
	=	spacing importStatement* classDefinition* !_ {}
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L926
importStatement
	=	IMPORT (ident (COMMA ident)* FROM)? string (INTO ident)? SEMI {}
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L986
classDefinition
	=	oClassModifiers* (oClassDef / oInterfaceDef / oMixinDef) spacing
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L1016
oClassModifiers
	=	ABSTRACT / FINAL / NATIVE / BLTCONFAKE
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L1038
oClassDef
	=	CLASS ident formalTypeArguments (EXTENDS objectTypeDeclaration)? (IMPLEMENTS objectTypeDeclaration (COMMA objectTypeDeclaration)*)? LWING memberDefinition* RWING
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L1038
oInterfaceDef
	=	INTERFACE ident formalTypeArguments (IMPLEMENTS objectTypeDeclaration (COMMA objectTypeDeclaration)*)? LWING memberDefinition* RWING
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L1038
oMixinDef	
	=	MIXIN ident formalTypeArguments LWING memberDefinition* RWING
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L1090
// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L1159
memberDefinition
	= 	oMemberDefinitionModifiers* CONST ident (COLON typeDeclaration)? (ASSIGN assignExpr)? SEMI
	/	oMemberDefinitionModifiers* FUNCTION functionDefinition
	/	oMemberDefinitionModifiers* VAR ident (COLON typeDeclaration)? (ASSIGN assignExpr)? SEMI
	;

oMemberDefinitionModifiers
	=	STATIC / ABSTRACT / OVERRIDE / FINAL / NATIVE / BLTCONREADONLY / INLINE / BLTCONPURE
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L1264
functionDefinition
	=	CONSTRUCTOR formalTypeArguments LPAR functionArgumentsExpr LWING initializeBlock
	/	ident formalTypeArguments LPAR functionArgumentsExpr COLON typeDeclaration (SEMI / LWING block)
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L1355
formalTypeArguments
	=	(DOT LT ident (COMMA ident)* GT)?
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L1375
actualTypeArguments
	=	(DOT LT typeDeclaration (COMMA typeDeclaration)* GT)?
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L1398
typeDeclaration
	=	VOID
	/	typeDeclarationNoArrayNoVoid (LBRA RBRA)?
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L1422
typeDeclarationNoArrayNoVoid
	=	MAYBEUNDEFINED
	/	NULLABLE nullableTypeDeclaration
	/	VARIANT
	/	primaryTypeDeclaration
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L1440
nullableTypeDeclaration
	=	DOT LT typeDeclaration GT
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L1466
primaryTypeDeclaration
	=	LPAR lightFunctionTypeDeclaration
	/	FUNCTION functionTypeDeclaration
	/	BOOLEAN
	/	INT
	/	NUMBER
	/	STRING
	/	objectTypeDeclaration
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L1490
objectTypeDeclaration
	=	((SUPER / ident) actualTypeArguments)? (DOT ident)? actualTypeArguments
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L1519
lightFunctionTypeDeclaration
	=	ARGS? typeDeclaration (COMMA ARGS? typeDeclaration)* RPAR ARROW typeDeclaration
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L1552
functionTypeDeclaration
	=	ident? LPAR RPAR COLON typeDeclaration
	/	ident? LPAR ARGS ident? COLON typeDeclaration RPAR COLON typeDeclaration
	/	ident? LPAR ident? COLON typeDeclaration (COMMA ident? COLON typeDeclaration)* COMMA ARGS ident? COLON typeDeclaration RPAR COLON typeDeclaration
	/	ident? LPAR ident? COLON typeDeclaration (COMMA ident? COLON typeDeclaration)* RPAR COLON typeDeclaration
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L1598
initializeBlock
	=	constructorInvocationStatement* block
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L1610
block
	=	statement* RWING
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L1621
statement
	=	SEMI
	/	VAR variableStatement
	/	IF ifStatement
	/	CONTINUE continueStatement
	/	BREAK breakStatement
	/	RETURN returnStatement
	/	THROW throwStatement
	/	TRY tryStatement
	/	ASSERT assertStatement
	/	LOG logStatement
	/	DELETE deleteStatement
	/	DEBUGGER // debuggerStatement
	/	FUNCTION functionStatement
	/	VOID
	/	LWING block
	/	(ident COLON)? DO doWhileStatement
	/	(ident COLON)? WHILE whileStatement
	/	(ident COLON)? FOR forStatement
	/	(ident COLON)? SWITCH switchStatement
	/	expr SEMI
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L1696
constructorInvocationStatement
	=	(SUPER / THIS / objectTypeDeclaration) LPAR argsExpr SEMI
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L1736
variableStatement
	=	variableDeclarations SEMI
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L1748
functionStatement
	=	ident functionExpr
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L1764
ifStatement
	=	LPAR expr RPAR subStatements (ELSE subStatements)?
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L1781
doWhileStatement
	=	subStatements WHILE LPAR expr RPAR
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L1796
whileStatement
	=	LPAR expr RPAR subStatements
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L1809
forStatement
	=	forInStatement
	/	LPAR (VAR variableDeclarations / expr)? SEMI expr? SEMI expr? RPAR subStatements
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L1866
forInStatement
	=	LPAR (VAR variableDeclaration / lhsExpr) IN expr RPAR subStatements
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L1889
continueStatement
	=	ident? SEMI
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L1897
breakStatement
	=	ident? SEMI
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L1905
returnStatement
	=	SEMI
	/	expr SEMI
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L1919
switchStatement
	=	LPAR expr RPAR LWING ((CASE expr COLON / DEFAULT COLON) statement*)* RWING
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L1981
throwStatement
	=	expr
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L1989
tryStatement
	=	LWING block (CATCH LPAR ident COLON typeDeclaration RPAR LWING block)* (FINALLY LWING block )?
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L2037
assertStatement
	=	expr SEMI
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L2047
logStatement
	=	assignExpr (COMMA assignExpr)* SEMI
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L2065
deleteStatement
	=	expr SEMI
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L2075
// debuggerStatement
// 	=
// 	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L2080
subStatements
	=	statement
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L2087
variableDeclarations
	=	variableDeclaration (COMMA variableDeclaration)*
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L2103
variableDeclaration
	=	ident (COLON typeDeclaration)? (ASSIGN assignExpr)? {}
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L2125
expr
	=	assignExpr (COMMA assignExpr)*
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L2139
assignExpr
	=	lhsExpr oAssignExprOpe assignExpr
	/	condExpr
	;

oAssignExprOpe
	=	ASSIGN
	/	MULEQ
	/	DIVEQ
	/	SUREQ
	/	ADDEQ
	/	SUBEQ
	/	UNSIGNEDRSHIFTEQ
	/	LSHIFTEQ
	/	RSHIFTEQ
	/	BITANDEQ
	/	XOREQ
	/	BITOREQ
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L2158
condExpr
	=	lorExpr (COND assignExpr? COLON assignExpr)?
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L2196
lorExpr
	=	landExpr (OR landExpr)*
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L2202
landExpr
	=	borExpr (AND borExpr)*
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L2208
borExpr
	=	bxorExpr (!OR BITOR bxorExpr)*
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L2214
bxorExpr
	=	bandExpr (XOR bandExpr)*
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L2220
bandExpr
	=	eqExpr (!AND BITAND eqExpr)*
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L2226
eqExpr
	=	relExpr ((EQ / NOTEQ) relExpr)*
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L2232
// FIXME in?
relExpr
	=	shiftExpr ((LTEQ / GTEQ / LT / GT / IN) shiftExpr)*
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L2244
shiftExpr
	=	addExpr ((UNSIGNEDRSHIFT / LSHIFT / RSHIFT) addExpr)*
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L2251
addExpr
	=	mulExpr (!INC !DEC (ADD / SUB) mulExpr)*
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L2260
mulExpr
	=	unaryExpr ((MUL / DIV / SUR) unaryExpr)*
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L2266
unaryExpr
	=	(INC / DEC / ADD / SUB / BITNOT / NOT / TYPEOF) unaryExpr
	/	asExpr
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L2290
asExpr
	=	postfixExpr (AS BLTCONNOCONVERT? typeDeclaration)*
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L2305
postfixExpr
	=	lhsExpr (INC / DEC / INSTANCEOF typeDeclaration)?
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L2321
lhsExpr
	=	SUPER superExpr
	/	LPAR lambdaExpr oLhsExprSub*
	/	FUNCTION functionExpr oLhsExprSub*
	/	NEW newExpr oLhsExprSub*
	/	primaryExpr oLhsExprSub*
	;

oLhsExprSub
	=	LPAR argsExpr
	/	LBRA expr RBRA
	/	DOT ident actualTypeArguments
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L2381
newExpr
	=	typeDeclarationNoArrayNoVoid (LBRA assignExpr? RBRA)* (LPAR argsExpr)?
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L2415
superExpr
	=	DOT ident LPAR argsExpr
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L2431
lambdaExpr
	=	functionArgumentsExpr (COLON typeDeclaration)? ARROW lambdaBody
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L2449
lambdaBody
	=	LWING block
	/	expr
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L2471
functionExpr
	=	LPAR functionArgumentsExpr COLON? typeDeclaration LWING block
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L2554
primaryExpr
	=	THIS
	/	UNDEFINED
	/	NULL nullLiteral
	/	FALSE
	/	TRUE
	/	LBRA arrayLiteral
	/	LWING hashLiteral
	/	LPAR expr RPAR
	/	numberLiteral
	/	&ident objectTypeDeclaration
	/	string
	/	regexpLiteral
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L2600
nullLiteral
	=	(COLON typeDeclaration)?
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L2613
arrayLiteral
	=	(assignExpr (COMMA assignExpr)*)? RBRA (COLON typeDeclaration)?
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L2633
hashLiteral
	=	((ident / numberLiteral / string) COLON assignExpr (COMMA (ident / numberLiteral / string) COLON assignExpr)*)? RWING (COLON typeDeclaration)?
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L2666
functionArgumentsExpr
	=	RPAR
	/	(ARGS ident / ident)? (COLON typeDeclaration)? (COMMA (ARGS ident / ident)? (COLON typeDeclaration)?)* RPAR
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L2711
argsExpr
	=	RPAR
	/	assignExpr (COMMA assignExpr)* RPAR
	;


// Literals
ident
	=	([a-z] / [A-Z] / "_") ([a-z] / [A-Z] / "_" / [0-9])* spacing
	;

string
	=	doubleQuoted spacing
	/	singleQuoted spacing
	;

doubleQuoted
	=	"\"" ^["\\]* ("\\" _ (!"\"" !"\\" _)*)* "\""
	;

singleQuoted
	=	"'" (!"'" !"\\" _)* ("\\" _ (!"'" !"\\" _)*)* "'"
	;

regexpLiteral
	=	"/" (!"/" !"\\" _)* ("\\" _ (!"/" !"\\" _)*)* "/" ("m" / "g" / "i")* spacing
	;


numberLiteral
	=	!("0" [xX]) numberLiteral2 spacing
	/	integerLiteral spacing
	;

decimalIntegerLiteral
	=	"0"
	/	[1-9] [0-9]*
	;

exponentPart
	=	[eE] [+-]? [0-9]+
	;

// TODO rename
numberLiteral2
	=	decimalIntegerLiteral ("." [0-9]*)? exponentPart?
	/	"." [0-9]+ exponentPart?
	/	"NaN"
	/	"Infinity"
	;

integerLiteral
	=	"0" [xX] ([0-9] / [a-f] / [A-F])+
	/	decimalIntegerLiteral
	;


// hidden
spacing
	=	(space / multilineComment / singlelineComment)*
	;

multilineComment
	=	"/*" ( !"*/" _ )* "*/"
	;

singlelineComment
	=	"//" ( !"\n" !"\r" _)* ("\r" / "\r\n" / "\n")
	;

space
	=	[ \t\r\n]
	;



// Tokens
NOT
	=	"!" spacing
	;

NOTEQ // not eq
	=	"!=" spacing
	;

SUR
	=	"%" spacing
	;

SUREQ // sur eq
	=	"%=" spacing
	;

AND
	=	"&&" spacing
	;

BITNOT // bit not
	=	"~" spacing
	;

BITAND // bit and
	=	"&" spacing
	;

BITANDEQ // bit and eq
	=	"&=" spacing
	;

LPAR // L par
	=	"(" spacing
	;

RPAR // R par
	=	")" spacing
	;

MUL
	=	"*" spacing
	;

MULEQ // mul eq
	=	"*=" spacing
	;

ADD
	=	"+" spacing
	;

INC
	=	"++" spacing
	;

ADDEQ // add eq
	=	"+=" spacing
	;

COMMA
	=	"," spacing
	;

SUB
	=	"-" spacing
	;

DEC
	=	"--" spacing
	;

SUBEQ // subeq
	=	"-=" spacing
	;

ARROW
	=	"->" spacing
	;

DOT
	=	"." spacing
	;

ARGS
	=	"..." spacing
	;

DIV
	=	"/" spacing
	;

DIVEQ // div eq
	=	"/=" spacing
	;

COLON
	=	":" spacing
	;

SEMI
	=	";" spacing
	;

LT
	=	"<" spacing
	;

LSHIFT // L shift
	=	"<<" spacing
	;

LSHIFTEQ // L shift eq
	=	"<<=" spacing
	;

UNSIGNEDRSHIFT // unsigned R shift
	=	">>>" spacing
	;

UNSIGNEDRSHIFTEQ // unsigned R shift eq
	=	">>>=" spacing
	;

RSHIFT // R shift
	=	">>" spacing
	;

RSHIFTEQ // R shift eq
	=	">>=" spacing
	;

LTEQ // lt eq
	=	"<=" spacing
	;

ASSIGN
	=	"=" spacing
	;

EQ
	=	"==" spacing
	;

GT
	=	">" spacing
	;

GTEQ // gt eq
	=	">=" spacing
	;

COND
	=	"?" spacing
	;

LBRA // L bra
	=	"[" spacing
	;

RBRA // r bra
	=	"]" spacing
	;

XOR
	=	"^" spacing
	;

XOREQ // xor eq
	=	"^=" spacing
	;

LWING // L wing
	=	"{" spacing
	;

BITOR // bit or
	=	"|" spacing
	;

BITOREQ // bit or eq
	=	"|=" spacing
	;

OR
	=	"||" spacing
	;

RWING // R wing
	=	"}" spacing
	;

MAYBEUNDEFINED // may be undefined
	=	"MayBeUndefined" spacing
	;

NULLABLE
	=	"Nullable" spacing
	;

ABSTRACT
	=	"abstract" spacing
	;

AS
	=	"as" spacing
	;

ASSERT
	=	"assert" spacing
	;

BOOLEAN
	=	"boolean" spacing
	;

BREAK
	=	"break" spacing
	;

CASE
	=	"case" spacing
	;

CATCH
	=	"catch" spacing
	;

CLASS
	=	"class" spacing
	;

CONST
	=	"const" spacing
	;

CONSTRUCTOR
	=	"constructor" spacing
	;

CONTINUE
	=	"continue" spacing
	;

DEBUGGER
	=	"debugger" spacing
	;

DEFAULT
	=	"default" spacing
	;

DELETE
	=	"delete" spacing
	;

DO
	=	"do" spacing
	;

ELSE
	=	"else" spacing
	;

EXTENDS
	=	"extends" spacing
	;

FALSE
	=	"false" spacing
	;

FINAL
	=	"final" spacing
	;

FINALLY
	=	"finally" spacing
	;

FOR
	=	"for" spacing
	;

FROM
	=	"from" spacing
	;

FUNCTION
	=	"function" spacing
	;

IF
	=	"if" spacing
	;

IMPLEMENTS
	=	"implements" spacing
	;

IMPORT
	=	"import" spacing
	;

IN
	=	"in" spacing
	;

INLINE
	=	"inline" spacing
	;

INSTANCEOF
	=	"instanceof" spacing
	;

INT
	=	"int" spacing
	;

INTERFACE
	=	"interface" spacing
	;

INTO
	=	"into" spacing
	;

LOG
	=	"log" spacing
	;

MIXIN
	=	"mixin" spacing
	;

NATIVE
	=	"native" spacing
	;

NEW
	=	"new" spacing
	;

NULL
	=	"null" spacing
	;

NUMBER
	=	"number" spacing
	;

OVERRIDE
	=	"override" spacing
	;

RETURN
	=	"return" spacing
	;

STATIC
	=	"static" spacing
	;

STRING
	=	"string" spacing
	;

SUPER
	=	"super" spacing
	;

SWITCH
	=	"switch" spacing
	;

THIS
	=	"this" spacing
	;

THROW
	=	"throw" spacing
	;

TRUE
	=	"true" spacing
	;

TRY
	=	"try" spacing
	;

TYPEOF
	=	"typeof" spacing
	;

UNDEFINED
	=	"undefined" spacing
	;

VAR
	=	"var" spacing
	;

VARIANT
	=	"variant" spacing
	;

VOID
	=	"void" spacing
	;

WHILE
	=	"while" spacing
	;

BLTCONFAKE // built-in constant __fake__
	=	"__fake__" spacing
	;

BLTCONNOCONVERT // built-in constant __noconvert__
	=	"__noconvert__" spacing
	;

BLTCONPURE // built-in constant __pure__
	=	"__pure__" spacing
	;

BLTCONREADONLY // built-in constant __readonly__
	=	"__readonly__" spacing
	;
